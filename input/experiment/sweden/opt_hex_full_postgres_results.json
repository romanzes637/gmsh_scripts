{
  "metadata": {
    "comments_mesh_metrics": "J - Jacobian determinant, IGE - Inverse Gradient Error, ICN - Condition Number",
    "comments_mesh_algorithms_3d": "1: Delaunay, 3: Initial mesh only, 4: Frontal, 7: MMG3D, 9: R-tree, 10: HXT",
    "ml": {}
  },
  "data": {
    "class": "action.optimize.Optuna",
    "tag": "experiment_sweden_hex_full_results",
    "work_path": "opt",
    "storage": "postgresql+psycopg2://ibrae:1234@10.254.55.75:5432/ibraedb",
    "study_name": "experiment_sweden_hex_full",
    "results_color_key": "elements",
    "do_results_reverse_color": false,
    "results_hover_keys": [
      "nodes",
      "minJ_by_maxJ_min", "minJ_by_maxJ_avg", "minJ_by_maxJ_max",
      "IGE_min", "IGE_avg", "IGE_max",
      "ICN_min", "ICN_avg", "ICN_max"
    ],
    "results_color_scale": "Viridis",
    "do_optimize": false,
    "copies": [
      "all_heater_plug.json",
      "rock.json",
      "tunnel.json",
      "borehole_plug.json",
      "heater_plug.json"
    ],
    "links": null,
    "sub_actions": [
      {"key": "subdivision_algorithm", "class": "action.Feature",
        "pre_call": {"class": "action.set.Value", "value": 2},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.SubdivisionAlgorithm": "{}"}}}}}
      },
      {"key": "mesh_algorithm_3d", "class": "action.Feature",
        "pre_call": {"class": "action.set.Categorical", "choices": [1]},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.Algorithm3D": "{}"}}}}}
      },
      {"key": "do_unregister_boreholes", "class": "action.Feature",
        "pre_call": {"class": "action.set.Value", "value": 0},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"data": {"children_items_do_unregister_boolean_map": [0, 1, "{}", "{}", 0, 0, 0, 0]}}}
      },
      {"key": "size_points_rock", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 0.1, "high": 5},
        "post_call": {"class": "action.get.Json", "path": "rock.json",
          "mapping": {"data": {"matrix": [
            ["-28.5;{};3", "28.5:2;{};3"],
            ["-27;{};3", "27:2;{};3"],
            ["-27;{};3", "27:2;{};3"]]}}}
      },
      {"key": "size_points_heater_plug", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 0.1, "high": 2},
        "post_call": {"class": "action.get.Json", "path": "heater_plug.json",
          "mapping": {"data": {"layer": [[".038;{};5"], ["6.5;{};18", "8;{};3"]]}}}
      },
      {"key": "size_points_borehole_plug", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 0.1, "high": 2},
        "post_call": {"class": "action.get.Json", "path": "borehole_plug.json",
          "mapping": {"data": {"layer": [[".25;{};5", "0.875;{};5"], ["6.5;{};18", "7;{};3"]]}}}
      },
      {"key": "size_points_tunnel", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 0.5, "high": 5},
        "post_call": {"class": "action.get.Json", "path": "tunnel.json",
          "mapping": {"data": {"layer": [
            ["1;{};5", "2.25;{};5"],
            ["1;{};5", "2.5;{};5"],
            ["1;{};5", "2.25;{};5"],
            ["1;{};5", "2.5;{};5"],
            ["57:4:.25:.25;{};9"]]}}}
      },
      {"key": "size_curvature", "class": "action.Feature",
        "pre_call": {"class": "action.set.Discrete", "low": 10, "high": 40, "num": 31},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.MeshSizeFromCurvature": "{}"}}}}}
      },
      {"key": "size_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 0, "high": 1},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.MeshSizeMin": "{}"}}}}}
      },
      {"key": "size_max", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 1, "high": 5},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.MeshSizeMax": "{}"}}}}}
      },
      {"key": "size_factor", "class": "action.Feature",
        "pre_call": {"class": "action.set.Continuous", "low": 0.1, "high": 2},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.MeshSizeFactor": "{}"}}}}}
      },
      {"key": "size_boundary", "class": "action.Feature",
        "pre_call": {"class": "action.set.Discrete", "low": 1, "high": 2, "num": 2},
        "post_call": {"class": "action.get.Json", "path": "all_heater_plug.json",
          "mapping": {"metadata": {"run": {"options": {"Mesh.MeshSizeExtendFromBoundary": "{}"}}}}}
      },
      {"class": "action.run.GmshScripts",
        "run_path": "../../../run.py",
        "input_path": "all_heater_plug.json",
        "log_path": "gmsh.log"
      },
      {"key": "constraint_J", "class": "action.Feature",
        "pre_call": {"class": "action.set.Equation", "equation": "{0} is not None and {0} > 0",
          "sub_actions": [
            {"key": "minJ_min", "class": "action.Feature",
            "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
              "value_type": "float", "regex": "Info: minJ .*((?<==)[\\s0-9.e-]*(?=,))"}}
          ]}
      },
      {"key": "elements", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "int", "regex": "Total:.*((?<=and)[\\s0-9]*(?=elements))"}
      },
      {"key": "nodes", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "int", "regex": "Total:.*((?<=:)[\\s0-9]*(?=nodes))"}
      },
      {"key": "blocks", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "int", "regex": "number of blocks:.*((?<=:)[\\s0-9]*(?=))"}
      },
      {"key": "volumes", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "int", "regex": "n_volumes:.*((?<=:)[\\s0-9]*(?=))"}
      },
      {"key": "minJ_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: minJ .*((?<==)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "minJ_avg", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: minJ .*((?<=,)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "minJ_max", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: minJ .*((?<=,)[\\s0-9.e-]*(?=\\())"}
      },
      {"key": "minJ_by_maxJ_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: minJ/maxJ .*((?<==)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "minJ_by_maxJ_avg", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: minJ/maxJ .*((?<=,)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "minJ_by_maxJ_max", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: minJ/maxJ .*((?<=,)[\\s0-9.e-]*(?=\\())"}
      },
      {"key": "IGE_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: IGE .*((?<==)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "IGE_avg", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: IGE .*((?<=,)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "IGE_max", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: IGE .*((?<=,)[\\s0-9.e-]*(?=\\())"}
      },
      {"key": "ICN_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: ICN .*((?<==)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "ICN_avg", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: ICN .*((?<=,)[\\s0-9.e-]*(?=,))"}
      },
      {"key": "ICN_max", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "Info: ICN .*((?<=,)[\\s0-9.e-]*(?=\\())"}
      },
      {"key": "transform_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.block.block.transform -((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "register_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.block.block.register -((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "boolean_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.boolean.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "synchronize_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.registry.synchronize -((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "structure_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.structure.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "quadrate_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.quadrate.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "smooth_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.smooth.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "size_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.size.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "pre_unregister_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.block.block.pre_unregister -((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "zone_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.zone.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "unregister_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.block.block.unregister -((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "generate_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "gmsh.generate -((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "optimize_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.optimize.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "refine_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "src.refine.*-((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "write_time", "class": "action.Feature",
        "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
          "value_type": "float", "regex": "gmsh.write - ((?<=-)[\\s0-9.e+-]*(?=s))"}
      },
      {"key": "objective_elements", "class": "action.Feature",
        "pre_call": {"class": "action.set.Equation", "equation": "{0}",
          "sub_actions": [
          {"key": "elements", "class": "action.Feature",
            "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
              "value_type": "int", "regex": "Total:.*((?<=and)[\\s0-9]*(?=elements))"}}
          ]}
      },
      {"key": "objective_minJ_by_maxJ", "class": "action.Feature",
        "pre_call": {"class": "action.set.Equation", "equation": "{0}",
          "sub_actions": [
          {"key": "minJ_by_maxJ_min", "class": "action.Feature",
            "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
              "value_type": "float", "regex": "Info: minJ/maxJ .*((?<==)[\\s0-9.e-]*(?=,))"}}
          ]}
      },
      {"key": "objective_IGE_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.Equation", "equation": "{0}",
          "sub_actions": [
          {"key": "IGE_min", "class": "action.Feature",
            "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
              "value_type": "float", "regex": "Info: IGE .*((?<==)[\\s0-9.e-]*(?=,))"}}
          ]}
      },
      {"key": "objective_ICN_min", "class": "action.Feature",
        "pre_call": {"class": "action.set.Equation", "equation": "{0}",
          "sub_actions": [
          {"key": "ICN_min", "class": "action.Feature",
            "pre_call": {"class": "action.set.RegexFile", "path": "gmsh.log",
              "value_type": "float", "regex": "Info: ICN .*((?<==)[\\s0-9.e-]*(?=,))"}}
          ]}
      }
    ],
    "objectives": {
      "objective_elements": "minimize",
      "objective_minJ_by_maxJ": "maximize",
      "objective_IGE_min": "maximize",
      "objective_ICN_min": "maximize"
    },
    "constraints": ["constraint_J"]
  }
}
